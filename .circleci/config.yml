version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.12 #

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache: # restores saved cache if no changes are detected since last run
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of explanation.
      - run: go get github.com/jstemmer/go-junit-report

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      # install Task builder
      - run: curl -sL https://taskfile.dev/install.sh | sh

      - run:
          name: Create AWS creds and config
          # Store the results of our tests in the $TEST_RESULTS directory
          command: |
            mkdir ~/.aws
            echo -e "[default]\naws_access_key_id=${AWS_ACCESS_KEY}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY}\n" > ~/.aws/credentials
            echo -e "[default]\nregion=us-west-2\noutput=json\n" > ~/.aws/config

      - run:
          name: Run build
          # Store the results of our tests in the $TEST_RESULTS directory
          command: |
            cd ~/project/projects/go/logging
            TEST_AWS_ACCESS_KEY=${AWS_ACCESS_KEY} TEST_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ~/project/bin/task build

      - run:
          name: Run tests
          command: |
            mkdir -p ${TEST_RESULTS}/go
            ./cc-test-reporter before-build
            cd ~/project/projects/go/logging
            trap "go-junit-report <${TEST_RESULTS}/go-test.log > ${TEST_RESULTS}/go/results.xml" EXIT
            TEST_AWS_ACCESS_KEY=${AWS_ACCESS_KEY} TEST_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ~/project/bin/task test | tee ${TEST_RESULTS}/go-test.log
      - run:
          name: Code Climate Test Coverage
          command: |
            cd ~/project/projects/go/logging
            ../../../cc-test-reporter format-coverage -t gocov --prefix github.com/ca-mmis/ref-logging/projects/go/logging/ c.out -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/pkg"

      - persist_to_workspace:
          root: projects/go/logging/coverage
          paths:
            - codeclimate.*.json

      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results


  upload-coverage:
    docker:
      - image: circleci/golang:1.12 #
    environment:
      CC_TEST_REPORTER_ID: ecacbd5c134cb7284722adfc8a9e06731c7d7e8eb469c492f6cd1c5e617d20eb
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps:
      - attach_workspace:
          at: coverage
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter sum-coverage --output - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --input -

workflows:
  version: 2

  commit:
    jobs:
      - build
      - upload-coverage:
          requires:
            - build